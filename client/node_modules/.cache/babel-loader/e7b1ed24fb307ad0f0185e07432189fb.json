{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\murali\\\\Documents\\\\GitHub\\\\react-portfolio-ms1\\\\client\\\\src\\\\pages\\\\SearchBooks.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport SearchForm from \"../components/SearchForm\";\nimport SearchResult from \"../components/SearchResult\";\n\nclass SearchBooks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      books: [],\n      error: \"\",\n      message: \"\"\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        search: event.target.value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault(); // once it clicks it connects to the google book api with the search value\n\n      API.getGoogleSearchBooks(this.state.search).then(res => {\n        if (res.data.items === \"error\") {\n          throw new Error(res.data.items);\n        } else {\n          // store response in a array\n          let results = res.data.items; //map through the array\n\n          results = results.map(result => {\n            //store each book information in a new object\n            result = {\n              key: result.id,\n              id: result.id,\n              title: result.volumeInfo.title,\n              author: result.volumeInfo.authors,\n              description: result.volumeInfo.description,\n              image: result.volumeInfo.imageLinks.thumbnail,\n              link: result.volumeInfo.infoLink\n            };\n            return result;\n          }); // reset the sate of the empty books array to the new arrays of objects with properties geting back from the response\n\n          this.setState({\n            books: results,\n            error: \"\"\n          });\n        }\n      }).catch(err => this.setState({\n        error: err.items\n      }));\n    };\n\n    this.handleSavedButton = event => {\n      // console.log(event)\n      event.preventDefault();\n      console.log(this.state.books);\n      let savedBooks = this.state.books.filter(book => book.id === event.target.id);\n      savedBooks = savedBooks[0];\n      API.saveBook(savedBooks).then(this.setState({\n        message: alert(\"Your book is saved\")\n      })).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Find Your Favorite Books with GoogleBook API\")), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      size: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchForm, {\n      handleFormSubmit: this.handleFormSubmit,\n      handleInputChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SearchResult, {\n      books: this.state.books,\n      handleSavedButton: this.handleSavedButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default SearchBooks;","map":{"version":3,"sources":["C:/Users/murali/Documents/GitHub/react-portfolio-ms1/client/src/pages/SearchBooks.js"],"names":["React","Component","API","Jumbotron","Container","Row","Col","SearchForm","SearchResult","SearchBooks","state","search","books","error","message","handleInputChange","event","setState","target","value","handleFormSubmit","preventDefault","getGoogleSearchBooks","then","res","data","items","Error","results","map","result","key","id","title","volumeInfo","author","authors","description","image","imageLinks","thumbnail","link","infoLink","catch","err","handleSavedButton","console","log","savedBooks","filter","book","saveBook","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container, Row, Col } from \"../components/Grid\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResult from \"../components/SearchResult\";\r\n\r\nclass SearchBooks extends Component {\r\n  //create state\r\n  state = {\r\n    search: \"\",\r\n    books: [],\r\n    error: \"\",\r\n    message: \"\",\r\n  };\r\n\r\n  //function to take value of what enter in the search bar\r\n  handleInputChange = (event) => {\r\n    this.setState({ search: event.target.value });\r\n  };\r\n\r\n  //function to control the submit button of the search form\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    // once it clicks it connects to the google book api with the search value\r\n    API.getGoogleSearchBooks(this.state.search)\r\n      .then((res) => {\r\n        if (res.data.items === \"error\") {\r\n          throw new Error(res.data.items);\r\n        } else {\r\n          // store response in a array\r\n          let results = res.data.items;\r\n          //map through the array\r\n          results = results.map((result) => {\r\n            //store each book information in a new object\r\n            result = {\r\n              key: result.id,\r\n              id: result.id,\r\n              title: result.volumeInfo.title,\r\n              author: result.volumeInfo.authors,\r\n              description: result.volumeInfo.description,\r\n              image: result.volumeInfo.imageLinks.thumbnail,\r\n              link: result.volumeInfo.infoLink,\r\n            };\r\n            return result;\r\n          });\r\n          // reset the sate of the empty books array to the new arrays of objects with properties geting back from the response\r\n          this.setState({ books: results, error: \"\" });\r\n        }\r\n      })\r\n      .catch((err) => this.setState({ error: err.items }));\r\n  };\r\n\r\n  handleSavedButton = (event) => {\r\n    // console.log(event)\r\n    event.preventDefault();\r\n    console.log(this.state.books);\r\n    let savedBooks = this.state.books.filter(\r\n      (book) => book.id === event.target.id\r\n    );\r\n    savedBooks = savedBooks[0];\r\n    API.saveBook(savedBooks)\r\n      .then(this.setState({ message: alert(\"Your book is saved\") }))\r\n      .catch((err) => console.log(err));\r\n  };\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Jumbotron>\r\n          <h1 className=\"text-white\">\r\n            Find Your Favorite Books with GoogleBook API\r\n          </h1>\r\n        </Jumbotron>\r\n        <Container>\r\n          <Row>\r\n            <Col size=\"12\">\r\n              <SearchForm\r\n                handleFormSubmit={this.handleFormSubmit}\r\n                handleInputChange={this.handleInputChange}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <br></br>\r\n        <Container>\r\n          <SearchResult\r\n            books={this.state.books}\r\n            handleSavedButton={this.handleSavedButton}\r\n          />\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBooks;\r\n"]},"metadata":{},"sourceType":"module"}